import os
import re
import logging
import asyncio
from aiohttp import web

from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.webhook.aiohttp_server import setup_application

# --- üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = os.getenv("API_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://telegram-bot-moderator.onrender.com/webhook")
OWNER_ID = 691724703  # ‚Üê –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID
GROUP_LINK = "https://t.me/poputchik_sozak"
ALLOWED_WORDS_FILE = "allowed.txt"

# --- üìú –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤
def load_allowed_words():
    if not os.path.exists(ALLOWED_WORDS_FILE):
        return set()
    with open(ALLOWED_WORDS_FILE, encoding='utf-8') as f:
        return set(normalize_word(line.strip()) for line in f if line.strip())

def normalize_word(text: str) -> str:
    # –£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É, –∑–∞–º–µ–Ω—è–µ—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫—É—é
    replacements = {
        '–∞': '–∞', '”ô': '”ô', '–±': '–±', '–≤': '–≤', '–≥': '–≥', '“ì': '“ì',
        '–¥': '–¥', '–µ': '–µ', '—ë': '–µ', '–∂': '–∂', '–∑': '–∑', '–∏': '–∏', '–π': '–∏',
        '–∫': '–∫', '“õ': '“õ', '–ª': '–ª', '–º': '–º', '–Ω': '–Ω', '“£': '“£',
        '–æ': '–æ', '”©': '”©', '–ø': '–ø', '—Ä': '—Ä', '—Å': '—Å', '—Ç': '—Ç',
        '—É': '—É', '“±': '“±', '“Ø': '“Ø', '—Ñ': '—Ñ', '—Ö': '—Ö', '“ª': '“ª',
        '—Ü': '—Å', '—á': '—à', '—à': '—à', '—â': '—à', '—ã': '—ã', '—ñ': '—ñ', '—ç': '–µ', '—é': '—É', '—è': '–∞'
    }
    text = re.sub(r'\s+', '', text.lower())
    return ''.join(replacements.get(c, c) for c in text)

ALLOWED_WORDS = load_allowed_words()

# --- ‚öôÔ∏è –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="[{asctime}] {levelname}: {message}",
    style="{",
    handlers=[
        logging.FileHandler("moderator.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)


# --- ‚úÖ –ö–æ–º–∞–Ω–¥–∞ /reload
async def reload_words(message: Message):
    if message.from_user.id != OWNER_ID:
        await message.reply("‚õî –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    global ALLOWED_WORDS
    ALLOWED_WORDS = load_allowed_words()
    await message.answer("üîÅ –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

# --- üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç–∏
def is_allowed_message(text: str) -> bool:
    text_norm = normalize_word(text)
    for word in ALLOWED_WORDS:
        if word in text_norm:
            return True
    return False

def has_external_link(text: str) -> bool:
    for match in re.findall(r'https?://[^\s]+', text):
        if GROUP_LINK not in match:
            return True
    return False

def has_phone_number(text: str) -> bool:
    return bool(re.search(r'(\+7|8)[\s\-]?\(?\d{3}\)?[\s\-]?\d{3}[\s\-]?\d{2}[\s\-]?\d{2}', text))

# --- üßπ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(message: Message):
    if not message.text:
        return

    text = message.text

    if has_external_link(text) and not has_phone_number(text):
        await message.delete()
        return

    if not is_allowed_message(text):
        await message.delete()

# --- üîó –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def register_handlers(dp: Dispatcher):
        dp.message.register(reload_words, Command("reload"))
        dp.message.register(handle_message)

# --- ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
async def on_startup(dispatcher: Dispatcher, bot: Bot):
    await bot.set_webhook(WEBHOOK_URL)
    logging.info("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def on_shutdown(dispatcher: Dispatcher, bot: Bot):
    await bot.delete_webhook()
    logging.info("‚ùå Webhook —É–¥–∞–ª—ë–Ω")

async def main():
    bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()
    register_handlers(dp)

    app = web.Application()
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    setup_application(app, dp, bot=bot, path="/webhook")
    return app

if __name__ == "__main__":
    app = asyncio.run(main())
    web.run_app(app, port=int(os.getenv("PORT", 10000)))


