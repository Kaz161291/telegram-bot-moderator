import re
import os
import asyncio
import logging

from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

from aiogram.filters import Command


# üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = os.getenv('API_TOKEN')  # ‚Üê –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –ê–¥—Ä–µ—Å —Ç–≤–æ–µ–≥–æ –≤–µ–±—Ö—É–∫–∞ (Render –≤—ã–¥–∞—Å—Ç —Å—Å—ã–ª–∫—É)
GROUP_LINK = 'https://t.me/poputchik_sozak'  # ‚Üê –£–∫–∞–∂–∏ —Å–≤–æ—é —Å—Å—ã–ª–∫—É
OWNER_ID = 691724703  # ‚Üê –∑–∞–º–µ–Ω–∏ —ç—Ç–æ —á–∏—Å–ª–æ –Ω–∞ —Å–≤–æ–π Telegram user ID


# üìú –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤
def load_banned_words(filename="xwords.txt"):
    if not os.path.exists(filename):
        return []
    with open(filename, encoding='utf-8') as f:
        return [line.strip().lower() for line in f if line.strip()]

BANNED_WORDS = load_banned_words()

# ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî —Ñ–∞–π–ª + –∫–æ–Ω—Å–æ–ª—å
logging.basicConfig(
    level=logging.INFO,
    format="[{asctime}] {levelname}: {message}",
    style="{",
    handlers=[
        logging.FileHandler("moderator.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)

# ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π (aiogram 3.7+)
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏
def has_external_links(text: str) -> bool:
    urls = re.findall(r"https?://\S+", text)
    for url in urls:
        if GROUP_LINK not in url:
            return True
    return False

# üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
def contains_banned_words(text: str) -> bool:
    text = text.lower()
    return any(bad_word in text for bad_word in BANNED_WORDS)

# üßπ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(Command("reload"))
async def reload_words(message: Message):
    if message.from_user.id != OWNER_ID:
        await message.reply("‚õî –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        logging.warning(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç –Ω–µ-–≤–ª–∞–¥–µ–ª—å—Ü–∞: {message.from_user.id}")
        return
    global BANNED_WORDS
    BANNED_WORDS = load_banned_words()
    await message.answer("üîÅ –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    logging.info(f"‚úÖ –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω –≤–ª–∞–¥–µ–ª—å—Ü–µ–º. –í—Å–µ–≥–æ —Å–ª–æ–≤: {len(BANNED_WORDS)}")

@dp.message()
async def moderate_message(message: Message):
    if not message.text:
        return

    text = message.text

    if has_external_links(text):
        await message.delete()
        logging.info(
            f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–Ω–µ—à–Ω–µ–π —Å—Å—ã–ª–∫–æ–π –æ—Ç @{message.from_user.username} ({message.from_user.id})"
        )
        return

    if contains_banned_words(text):
        await message.delete()
        logging.info(
            f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–º —Å–ª–æ–≤–æ–º –æ—Ç @{message.from_user.username} ({message.from_user.id})"
        )
        return

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
from aiohttp import web
from aiogram.webhook.aiohttp_server import setup_application

async def on_startup(dispatcher: Dispatcher, bot: Bot):
    await bot.set_webhook(WEBHOOK_URL)
    logging.info("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def on_shutdown(dispatcher: Dispatcher, bot: Bot):
    await bot.delete_webhook()
    logging.info("‚ùå Webhook —É–¥–∞–ª—ë–Ω")

async def main():
    app = web.Application()
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    setup_application(app, dp, bot=bot)
    logging.info("üöÄ AIOHTTP –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
    return app

if __name__ == "__main__":
    web.run_app(main())
