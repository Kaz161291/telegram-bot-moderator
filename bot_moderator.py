import re
import os
import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command

# üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = os.getenv('API_TOKEN')
GROUP_LINK = 'https://t.me/poputchik_sozak'
OWNER_ID = 691724703

# ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤
def load_allowed_words(filename="allowed_words.txt"):
    if not os.path.exists(filename):
        return []
    with open(filename, encoding='utf-8') as f:
        words = [line.strip().lower().replace(' ', '') for line in f if line.strip()]
        return words

ALLOWED_WORDS = load_allowed_words()

# ‚öôÔ∏è –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="[{asctime}] {levelname}: {message}",
    style="{",
    handlers=[
        logging.FileHandler("moderator.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)

# ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# üîÅ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤
@dp.message(Command("reload"))
async def reload_words(message: Message):
    if message.from_user.id != OWNER_ID:
        await message.reply("‚õî –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    global ALLOWED_WORDS
    ALLOWED_WORDS = load_allowed_words()
    await message.answer("üîÅ –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    logging.info(f"‚úÖ –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω. –í—Å–µ–≥–æ: {len(ALLOWED_WORDS)}")

# üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
def is_message_allowed(text: str) -> bool:
    normalized = text.lower()
    clean_text = normalized.replace(" ", "")
    for word in ALLOWED_WORDS:
        if word in clean_text:
            return True
    return False

# üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å—Å—ã–ª–∫–∏ (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É)
def is_safe_link(text: str) -> bool:
    phone_pattern = r'(\+7|8)\d{9,10}'
    urls = re.findall(r"https?://\S+", text)
    for url in urls:
        if GROUP_LINK in url:
            continue
        return False
    if re.search(phone_pattern, text):
        return True
    return not urls  # –µ—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ —Å—Å—ã–ª–∫–∏ ‚Äî —É–¥–∞–ª–∏–º

# üßπ –ú–æ–¥–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def moderate_message(message: Message):
    if not message.text:
        return

    text = message.text

    if is_message_allowed(text):
        return

    if not is_safe_link(text):
        await message.delete()
        logging.info(f"–£–¥–∞–ª–µ–Ω–∞ –≤–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞ –æ—Ç @{message.from_user.username} ({message.from_user.id})")
        return

    await message.delete()
    logging.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{message.from_user.username} ({message.from_user.id}) ‚Äî –Ω–µ—Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
async def main():
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
